#!/usr/bin/env python3

import argparse
import sys
import json

# Import service modules
from modules.aws_config import setup_aws_config
from modules.guardduty import setup_guardduty
from modules.security_hub import setup_security_hub
from modules.access_analyzer import setup_access_analyzer
from modules.detective import setup_detective
from modules.inspector import setup_inspector

def main():
    parser = argparse.ArgumentParser(description='Setup AWS Security Services')
    
    # Service enable/disable flags
    parser.add_argument('--aws-config', help='Enable AWS Config (Yes/No)')
    parser.add_argument('--guardduty', help='Enable GuardDuty (Yes/No)')
    parser.add_argument('--security-hub', help='Enable Security Hub (Yes/No)')
    parser.add_argument('--access-analyzer', help='Enable IAM Access Analyzer (Yes/No)')
    parser.add_argument('--detective', help='Enable Detective (Yes/No)')
    parser.add_argument('--inspector', help='Enable Inspector (Yes/No)')
    
    # Configuration files
    parser.add_argument('--accounts', help='Path to accounts.toml file')
    
    # Standard flags (automatically passed by deployment system)
    parser.add_argument('--dry-run', action='store_true', help='Show what would be done without making changes')
    parser.add_argument('--verbose', action='store_true', help='Verbose output')
    
    args = parser.parse_args()
    
    print("Foundation Security Services Setup")
    print("=================================")
    
    if args.dry_run:
        print("üîç DRY RUN MODE: No actual changes will be made")
    
    if args.verbose:
        print("üìä VERBOSE MODE: Additional debugging output enabled")
        print("\nArguments received:")
        print(f"  --aws-config: {args.aws_config}")
        print(f"  --guardduty: {args.guardduty}")
        print(f"  --security-hub: {args.security_hub}")
        print(f"  --access-analyzer: {args.access_analyzer}")
        print(f"  --detective: {args.detective}")
        print(f"  --inspector: {args.inspector}")
        print(f"  --accounts: {args.accounts[:100]}..." if len(args.accounts) > 100 else f"  --accounts: {args.accounts}")
        print(f"  --dry-run: {args.dry_run}")
        print(f"  --verbose: {args.verbose}")
    
    # Parse accounts data
    try:
        accounts_data = json.loads(args.accounts) if args.accounts else {}
        if args.verbose:
            print(f"\nParsed accounts data: {accounts_data}")
    except json.JSONDecodeError as e:
        print(f"‚ùå ERROR: Failed to parse accounts data: {e}")
        return 1
    
    # Track results for final summary
    results = {}
    
    # Execute security service setup functions in order (most basic to most expendable)
    services = [
        ("AWS Config", setup_aws_config, args.aws_config),
        ("GuardDuty", setup_guardduty, args.guardduty),
        ("Security Hub", setup_security_hub, args.security_hub),
        ("IAM Access Analyzer", setup_access_analyzer, args.access_analyzer),
        ("Detective", setup_detective, args.detective),
        ("Inspector", setup_inspector, args.inspector),
    ]
    
    for service_name, setup_func, enabled in services:
        try:
            print(f"\nüîß Processing {service_name}...")
            success = setup_func(enabled, accounts_data, args.dry_run, args.verbose)
            results[service_name] = "‚úÖ SUCCESS" if success else "‚ö†Ô∏è FAILED"
            
        except Exception as e:
            print(f"‚ùå CRITICAL ERROR in {service_name}: {e}")
            results[service_name] = f"‚ùå CRITICAL ERROR: {e}"
    
    # Final summary
    print("\n" + "="*60)
    print("FINAL SUMMARY")
    print("="*60)
    
    for service_name, result in results.items():
        print(f"{service_name}: {result}")
    
    # Determine overall exit code
    failed_services = [name for name, result in results.items() if "FAILED" in result or "ERROR" in result]
    
    if failed_services:
        print(f"\n‚ö†Ô∏è {len(failed_services)} service(s) had issues: {', '.join(failed_services)}")
        print("‚úÖ Script completed with warnings")
        return 0  # Still return 0 to avoid breaking deployment pipeline
    else:
        print("\n‚úÖ All services processed successfully!")
        return 0

if __name__ == '__main__':
    sys.exit(main())